<b>Demystifying Regular Expressions</b>

I watched the tech talk Demystifying Regular Expressions. The speaker mentioned that many people are afraid of regular expression. The talk starts with the basics and progressively gets more advanced.
The key takeaways of this talk were
•	All regular expressions start and end with /. i.e /{content}/{flags}. In javascript, the flags are g, i and m. g - global, i - case insensitive, m - multiline.
        Example : /a/g - matches 'a' anywhere in the string
•	Dot (.) matches any character except line break. \ can used to escape dot if necessary. Dot is a meta character.
•	/ a{10} /g - Matches 10 'a's
•	/ a{10, } /g - Matches at least 10 'a's
•	/ a{4, 5} /g - Matches 4 - 5 'a's
•	/ a{0, } /g and / a*/ g - Matches 0 of more occurrences of 'a'. Also matches empty strings
•	/ a+ /g - Matches 1 of more occurrences of 'a'
•	/ a? /g - Matches 0 or more occurrences of 'a'. ? means optional, so this RE will also match with "b". ? matches as fewer characters as possible
•	/ <.+?> /g - Matches HTML tags
•	/ [abc] /g - Matches either a, b or c
•	/ [abc]+ /g - Matches one or more a, b, c
•	/ a-z]+ /g - Matches all letters. Meta characters don't have to be escaped in square brackets
•	/ \w /g - Matches all letters, numbers and underscore. / \W /g - All characters except letters, numbers and underscore.
•	/ \d /g - Matches all numbers. / \D /g - All characters except digits
•	/ \s /g - Matches all white spaces. / \S /g - All characters except spaces
•	/ [\w-] /g - Matches telephone numbers
•	/ [^g-z] /g - Matches letters from a - f, that is not from g - z. ^ stands for negation
•	/ (ab | ba) /g - Matches ab or ba. () capture the regular expression in memory, if thats not needed use / (?: ab | ba ) /g
•	^ and $ are called anchors. ^ - beginning of string. $ - end of string
•	/ \b/ g - Matches if there is a transition between \w and \W. Does not match any actual character
•	/ \B /g - Matches if there is a transition between \w and \w or \W and \W
•	/ a(b) /g - b comes after a
 
There are functions in javascript that can be used to match regular expressions. For example the following functions can be used for counting words using regexes
text.match(/\w+/g).length;
text.split(/\s+/g).length;

